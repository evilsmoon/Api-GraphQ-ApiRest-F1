type Query {
  "Lista de las temporadas de Formula 1 . de 1950 a 2019"
  SeasonsList: [Season!]!
  """
  Carreras por Year
  """
  racesByYear(year: String!): [Race!]!
  """
  Carreras por Year and Round
  """
  raceSelect(year: String!, round: Int!): Race
  """
  Historia de los Drivers por pageElementes y page
  """
  historyDrivers(pageElements: Int, page: Int): [Driver!]!
  """
  Driver por Year
  """
  driversYear(year: String!): [Driver!]!
  """
  Driver por Year and Round
  """
  driversYearAndRound(year: String!, round: Int!): [Driver!]!
  """
  Driver select by ID 
  """
  driversSelect(id: String!): Driver
  """
  los resultados de los pilotos a침o por a침o, donde obtenemos la clasificaci칩n general final excepto en el a침o actual
  """
  seasonPilotsRanking(year: String!): [DriverStanding!]!
  """
   Circuitos Historicos
  """
  historyCircuits(pageElements: Int, page: Int): [Circuit!]!
  """
   Circuitos Selecionado
  """
  circuitSelect(id: String!): Circuit
}

type Mutation {
  add(value: String!): [String]
}
  
type Season {
  year: String!
  url: String!
  urlMobile: String!
}

type Race {
  season: String!
  round: String!
  url: String!
  urlMobile: String!
  name: String!
  circuit: Circuit!
  date: String!
  time: String
}

type Circuit {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  location: Location!
}

type Location {
  lat: String!
  lng: String!
  locality: String!
  country: String!
}
type Driver {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  dateOfBirth: String!
  nationality: String!
  code: String
}

type DriverStanding {
  position: String!
  positionText: String!
  points: String!
  wins: String!
  driver: Driver!
  constructors: [Constructor]!
}

type Constructor {
  id: String!
  url: String!
  urlMobile: String!
  name: String!
  nationality: String!
}


